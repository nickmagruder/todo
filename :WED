import React, { useState, useEffect } from 'react';
import TodoForm from './form.js';
import TodoList from './list.js';
/* import Paginate from './paginate.js'; */
import axios from 'axios';
import useAjax from '../../hooks/useAjax';

import './todo.scss';

const todoAPI = 'https://api-js401.herokuapp.com/api/v1/todo';

export default function ToDo() {
  const [response, request] = useAjax();
  const [data, setData] = useState([]);
  const [list, setList] = useState([]);


  /*   useEffect(() => {
      request({ url: 'https://api-js401.herokuapp.com/api/v1/todo' });
          // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [request]);  */
  useEffect(() => {
    console.log('response updated', response);
    response.results && setData(response.results);
    // setData(response.results);
  }, [response]);


  useEffect(() => {
    setData(response);
  }, [response]);

  /*   const addItem = (item) => {
      let options = {
        url: todoAPI,
        method: 'post',
        mode: 'cors',
        headers: { 'Content-Type': 'application/json' },
        data: item
      }
  
      request(options);
    } */

  const addItem = (item) => {
    let options = {
      url: todoAPI,
      method: 'post',
      mode: 'cors',
      headers: { 'Content-Type': 'application/json' },
      data: item,
    };
    request(options);
  };

  const toggleComplete = id => {
    const item = data.filter(i => i._id === id)[0] || {};

    if (item._id) {
      const url = `${todoAPI}/${id}`;
      const options = {
        url: url,
        method: 'put',
        mode: 'cors',
        headers: { 'Content-Type': 'application/json' },
        data: {
          complete: !item.complete,
        },
      };
      request(options);
    }
  };

  const deleteItem = id => {
    const url = `${todoAPI}/${id}`;
    const options = {
      url: url,
      method: 'delete',
      mode: 'cors',
      headers: { 'Content-Type': 'application/json' },
    };
    request(options);
  };

  /*    const _getItem = async () => {
      try {
        let request = await axios({
          method: 'get',
          url: todoAPI
        })
        let todos = request.data.results;
        setList(todos);
      }
      catch (e) {
        console.warn(e.message);
      }
    }   */

  const getItems = item => {
    const options = {
      url: todoAPI,
      method: 'get',
      mode: 'cors',
      headers: { 'Content-Type': 'application/json' },
      // data: item,
    };
    // const results = request.data.results;
    // setList(results);
    request(options);
  };


  /*   const toggleComplete = async (id) => {
      let newValue = list.filter((list) => list._id === id)[0];
  
      if (newValue._id) {
        let request = await axios({
          method: 'put',
          url: `${todoAPI}/${id}`,
          data: { complete: true }
        })
        _getItem();
        return request;
      };
    }; */

  /*   const deleteItem = async (id) => {
      try {
        let request = await axios({
          method: 'delete',
          url: `${todoAPI}/${id}`,
        })
        _getItem();
        return request;
      }
      catch (e) {
        console.warn(e.message);
      }
    } */

  const _axiosGetItems = async item => {
    const request = await axios({
      method: 'get',
      url: todoAPI,
    });

    const results = request.data.results;
    setList(results);
  };

  /*    useEffect(() => {
      getItem();
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [getItem]); */
  useEffect(() => { getItems(); }, []);



  return (
    <>
      <header>
        <h2>
          {console.log(list, 'LISTTTTTTTTTTTTTTTTTTTTTTTTTT')}
          To do List Manager, there are {list.filter(item => !item.complete).length} Items To Complete
        </h2>
      </header>

      <section className="todo">

        <div>
          <TodoForm addItem={addItem} />

        </div>


        <div>
          <TodoList
            list={list}
            handleComplete={toggleComplete}
            handleDelete={deleteItem}
          />
        </div>
      </section>
    </>
  );
}


/* export default ToDo; */
